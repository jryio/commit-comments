#!/bin/bash
#
# Copyright (c) 2016 Jacob Young
# MIT License
#
# Remove @commit comments from source files

IGNORED=( ".ccignore" )

# If the script is deployed to the .git directory,
# move to the repository directory so .ccignore file
# can be found
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
if echo "$DIR" | grep -qs 'git'; then
  cd "$( echo "$DIR" | grep -Po '^.*(?=(\.git))' )" 
fi

if [ -f ".ccignore" ]; then
 while IFS='' read -r line || [[ -n "$line" ]]; do
   IGNORED+=( "$line" )
  done < ".ccignore"
fi

IFS=$'\n' ADDED_FILES=( $(git ls-files) )

for i in ${!ADDED_FILES[@]}; do
  file_path=${ADDED_FILES["$i"]}
  filename=$( basename "$file_path" )
  if [[ "${IGNORED[*]}" =~ "${filename}" ]]; then
    # File should not be read - remove
    unset ADDED_FILES["$i"]
  fi
done

for fn in "${ADDED_FILES[@]}"; do
  # Uncomment sed command to remove '// @commit' comments in all files
  sed -ri 's/(([#;*]|\/{1,2})?(\s+)?@commit([-:.\s]+)?)([^\r\n*\/]+)//' "$fn" # GNU sed compatible only 
  # Uncomment sed command to replace multiple empty lines with a single empty line
  # sed '/^$/N;/^\n$/D' "$fn" # GNU sed compatible only
done

git add "${ADDED_FILES[@]}" && git commit --amend --reuse-message
